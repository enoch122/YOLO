import json
#dummy data for testing purposes
inputList = [(15, 0.8885403275489807), (15, 0.8899849057197571), (15, 0.8789748549461365), (15, 0.888681173324585), (15, 0.8743056654930115), (15, 0.737569272518158), (15, 0.8131430149078369), (15, 0.7147207260131836), (15, 0.8431611657142639), (15, 0.833610475063324), (15, 0.7453136444091797), (15, 0.8259609341621399), (15, 0.8276821374893188), (15, 0.7347860336303711), (15, 0.8271477222442627), (15, 0.8376139998435974), (15, 0.8741682171821594), (15, 0.8553905487060547), (15, 0.8666870594024658), (15, 0.8707247972488403), (15, 0.842372715473175), (15, 0.7714522480964661), (15, 0.7364068627357483), (15, 0.8731584548950195), (15, 0.8757227063179016), (15, 0.8674253821372986), 
             (15, 0.862341046333313), (15, 0.8636714816093445), (15, 0.8767825365066528), (15, 0.8661395311355591), (15, 0.8807051181793213), (15, 0.8732008934020996), (15, 0.8776708841323853), (15, 0.8796569108963013), (15, 0.8846712112426758), (15, 0.8619540929794312), (15, 0.8743356466293335), (15, 0.8540375828742981), (15, 0.883992612361908), (15, 0.8365035057067871), (15, 0.8506568670272827), (15, 0.864311695098877), (15, 0.8729522228240967), (15, 0.8817412257194519), (15, 0.8732755184173584), (15, 0.8662797808647156), (15, 0.853924036026001), (15, 0.8594926595687866), (15, 0.8318158388137817), (15, 0.8440299034118652), (15, 0.8568015098571777), (15, 0.8761175870895386), 
             (15, 0.8625695705413818), (15, 0.8782194256782532), (15, 0.8817092180252075), (15, 0.8489775657653809), (15, 0.8597404360771179), (15, 0.8739055395126343), (15, 0.8572898507118225), (15, 0.834597110748291), (15, 0.8576692342758179), (15, 0.8414967656135559), (15, 0.8422917723655701), (15, 0.8512625694274902), (15, 0.8577256202697754), (15, 0.8618844151496887), (15, 0.8715538382530212), (15, 0.8580516576766968), (15, 0.8246884346008301), (15, 0.8586090803146362), (15, 0.8780121803283691), (15, 0.8464852571487427), (15, 0.8947350382804871), (15, 0.878142774105072), (15, 0.8819020986557007), (15, 0.8622758388519287), (15, 0.8132011294364929), (15, 0.8457054495811462), 
             (15, 0.8589921593666077), (16, 0.8201227188110352), (16, 0.8234100341796875), (16, 0.8281316757202148), (16, 0.8147373795509338), (16, 0.8118183016777039), (15, 0.8554583787918091), (16, 0.8150579929351807), (16, 0.8280068039894104), (15, 0.8802003860473633), (16, 0.82773357629776), (15, 0.8679623603820801), (15, 0.8150668740272522), (15, 0.8625619411468506), (15, 0.8728744387626648), (15, 0.8552032113075256), (15, 0.836509644985199), (15, 0.849787175655365), (15, 0.8583931922912598), (15, 0.849396824836731), (15, 0.85191410779953), (15, 0.8409571647644043), (15, 0.8517619371414185), (15, 0.8643665313720703), (15, 0.8559504747390747), (15, 0.8486813306808472), (15, 0.8606207370758057), 
             (15, 0.8601609468460083), (15, 0.8481860160827637), (15, 0.8607187271118164), (15, 0.8463186621665955), (15, 0.8511900901794434), (15, 0.8640207648277283), (15, 0.8512229323387146), (15, 0.8549830317497253), (16, 0.8488183617591858), (16, 0.8439086675643921), (15, 0.8366323709487915), (15, 0.8560961484909058), (15, 0.8522000908851624), (15, 0.9063968062400818), (15, 0.8697330951690674), (15, 0.8639301657676697), (16, 0.8483783602714539), (16, 0.8442090153694153), (16, 0.8355586528778076), (15, 0.8491370677947998), (15, 0.8438176512718201), (15, 0.8364216089248657), (15, 0.8448024392127991), (15, 0.8456472754478455), (15, 0.8426982760429382), (15, 0.8572838306427002), 
             (15, 0.8311718702316284), (16, 0.8259076476097107), (16, 0.8378376364707947), (16, 0.8401724696159363), (16, 0.8366876840591431), (15, 0.8587744235992432), (15, 0.8603479862213135), (15, 0.8487637639045715), (16, 0.8545854091644287), (16, 0.8635683655738831), (15, 0.8615076541900635), (15, 0.85895836353302), (16, 0.8590939044952393), (15, 0.8740656971931458), (15, 0.8652602434158325), (16, 0.8679749965667725), (16, 0.8685883283615112), (16, 0.8577167391777039), (16, 0.8450137972831726), (15, 0.8436737060546875), (15, 0.863775908946991), (15, 0.8496062755584717), (15, 0.8341460227966309), (15, 0.8382917046546936), (16, 0.8284825086593628), (15, 0.8508157134056091), (16, 0.8354628682136536), 
             (15, 0.8512325286865234), (15, 0.8612642884254456), (16, 0.850963830947876), (15, 0.8625454306602478), (15, 0.8593312501907349), (15, 0.8761647343635559), (16, 0.8605464696884155), (15, 0.8601170182228088), (16, 0.8642646670341492), (16, 0.8444937467575073), (16, 0.8506070971488953), (16, 0.8509843349456787), (16, 0.8610839247703552), (16, 0.8641141653060913), (15, 0.8633440136909485), (15, 0.8573962450027466), (16, 0.8488991856575012), (16, 0.862579345703125), (16, 0.8663660883903503), (16, 0.8466829657554626), (16, 0.8587931394577026), (16, 0.8574471473693848), (16, 0.8444468975067139), (16, 0.843722403049469), (16, 0.8377288579940796), (16, 0.8409715294837952), (15, 0.8555288314819336), (15, 0.856683611869812), 
             (15, 0.8565518260002136), (16, 0.8298510909080505), (16, 0.8538451790809631), (16, 0.8661563396453857), (16, 0.8735679388046265), (16, 0.8555505275726318), (15, 0.8622202277183533), (16, 0.8424317836761475), (16, 0.8463163375854492), (16, 0.823327898979187), (16, 0.8175338506698608), (15, 0.8384526968002319), (16, 0.8302778005599976), (16, 0.8507802486419678), (16, 0.8522588014602661), (16, 0.8506840467453003), (16, 0.8488989472389221), (16, 0.8416327238082886), (16, 0.8412556052207947), (15, 0.843275249004364), (15, 0.8407840728759766), (15, 0.804961085319519), (15, 0.8173069357872009), (15, 0.8197723031044006), (15, 0.8267934322357178), (15, 0.8264719247817993), (15, 0.8341695070266724), (15, 0.8512675166130066), 
             (15, 0.858012855052948), (15, 0.833711564540863), (15, 0.8370085954666138), (15, 0.8216974139213562), (15, 0.7609950304031372), (15, 0.8487651944160461), (15, 0.8310436606407166), (15, 0.8549401760101318), (15, 0.8573924899101257), (16, 0.8216007947921753), (16, 0.8113512992858887), (15, 0.8446186780929565), (16, 0.8419936299324036), (15, 0.8490617871284485), (15, 0.8534737825393677), (15, 0.8595346808433533), (15, 0.8504303097724915), (15, 0.8326824903488159), (15, 0.8015680909156799), (15, 0.8352743983268738), (15, 0.8661314845085144), (15, 0.8529152870178223), (15, 0.8544553518295288), (15, 0.8461300730705261), (15, 0.8497507572174072), (15, 0.8666775226593018), (15, 0.8568085432052612)]


def layerFilterAndMap(inputList, refScore, requestID, possiblePlaces, location_information):
    resultJSON = None
    #map count with  id and score that higher than the threshold
    countMap = {}
    for item in inputList:
        id, score = item
        if score >= refScore:
            if id in countMap:
                countMap[id] += 1
            else:
                countMap[id] = 1
    # Sort the countMap by value in descending order
    sortedCountMap = {k: v for k, v in sorted(countMap.items(), key=lambda item: item[1], reverse=True)}
    # Get first three keys from the sortedCountMap
    first_three_keys = list(sortedCountMap.keys())[:3] if len(sortedCountMap) >= 3 else list(sortedCountMap.keys())
    # Construct a tuple of all keys extracted, sorted in ascending order
    locationKey = tuple(sorted(first_three_keys))
    # Check if the locationKey exists in possiblePlaces
    if locationKey in possiblePlaces:
        # If it exists, retrieve the corresponding value
        locationName = possiblePlaces[locationKey]
    #construct result JSON object
    if locationName in location_information:
        # Parse the JSON string into a Python dictionary
        location_info_dict = json.loads(location_information[locationName])
        # Add the requestID to the dictionary
        location_info_dict['requestID'] = requestID
        # Convert the dictionary back into a JSON string
        resultJSON = json.dumps(location_info_dict)
    else:
        resultJSON = None
    
    return resultJSON



possiblePlaces = {(15, 16):"room 217"}
location_information = {"room 217": '{"x": 0.0, "y": 0.0, "floor": 2, "name": "room 217"}'}
layerFilterAndMap(inputList, 0.74, 0, possiblePlaces, location_information)